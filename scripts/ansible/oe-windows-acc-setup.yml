# Copyright (c) Open Enclave SDK contributors.
# Licensed under the MIT License.

---
- hosts: windows-agents
  any_errors_fatal: true
  become_method: runas
  tasks:
    - name: OE setup | Set installer URLs from the OE storage account
      set_fact:
        intel_dcap_url:      "https://registrationcenter-download.intel.com/akdlm/irc_nas/18784/Intel%20SGX%20DCAP%20for%20Windows%20v1.14.100.3.exe"
        intel_dcap_hash:     "0C91FF2661CC2B3B4440A05FABF78132C3E95781A40EEAB3C9D7A9955CC5B7DC"
        git_url:             "https://oejenkins.blob.core.windows.net/oejenkins/Git-2.31.1-64-bit.exe"
        git_hash:            "C43611EB73AD1F17F5C8CC82AE51C3041A2E7279E0197CCF5F739E9129CE426E"
        seven_zip_url:       "https://oejenkins.blob.core.windows.net/oejenkins/7z1806-x64.msi"
        seven_zip_hash:      "F00E1588ED54DDF633D8652EB89D0A8F95BD80CCCFC3EED362D81927BEC05AA5"
        vs_buildtools:       "https://oejenkins.blob.core.windows.net/oejenkins/vs_buildtools_2019.exe"
        vs_buildtools_hash:  "50BD88968ED947E13BAF628F5A7DA94E73BF6B84F545B1EE338AA848A9377B76"
        clang_10_url:        "https://github.com/llvm/llvm-project/releases/download/llvmorg-10.0.0/LLVM-10.0.0-win64.exe"
        clang_10_hash:       "893f8a12506f8ad29ca464d868fb432fdadd782786a10655b86575fc7fc1a562"
        clang_11_url:        "https://github.com/llvm/llvm-project/releases/download/llvmorg-11.1.0/LLVM-11.1.0-win64.exe"
        clang_11_hash:       "B5770BBFAC712D273938CD155E232AFAA85C2E8D865C7CA504A104A838568516"
        shellcheck_url:      "https://oejenkins.blob.core.windows.net/oejenkins/shellcheck-v0.7.0.zip"
        shellcheck_hash:     "02CFA14220C8154BB7C97909E80E74D3A7FE2CBB7D80AC32ADCAC7988A95E387"
        nuget_url:           "https://oejenkins.blob.core.windows.net/oejenkins/nuget-3.4.3.nupkg"
        nuget_hash:          "2D4D38666E5C7D27EE487C60C9637BD9DD63795A117F0E0EDC68C55EE6DFB71F"
        devcon_package_url:  "https://oejenkins.blob.core.windows.net/oejenkins/devcon_package.cab"
        devcon_package_hash: "A38E409617FC89D0BA1224C31E42AF4344013FEA046D2248E4B9E03F67D5908A"
        az_dcap_client_url:  "https://www.nuget.org/api/v2/package/Microsoft.Azure.DCAP/1.11.2"
        az_dcap_client_hash: "434944D1968772283124419184210149B80722409929F6A93E2FB1ACED853ADF"
        nsis_url:            "https://oejenkins.blob.core.windows.net/oejenkins/nsis-3.05-setup.exe"
        nsis_hash:           "1A3CC9401667547B9B9327A177B13485F7C59C2303D4B6183E7BC9E6C8D6BFDB"

    - name: OE setup | Run the install-windows-prereqs.ps1 script (this may take a while)
      script: ../install-windows-prereqs.ps1
        -InstallPath         "C:\oe_prereqs"
        -LaunchConfiguration "{{ launch_configuration }}"
        -DCAPClientType      "Azure"
        -IntelDCAPURL        "{{ intel_dcap_url }}"
        -IntelDCAPHash       "{{ intel_dcap_hash }}"
        -GitURL              "{{ git_url }}"
        -GitHash             "{{ git_hash }}"
        -SevenZipURL         "{{ seven_zip_url }}"
        -SevenZipHash        "{{ seven_zip_hash }}"
        -VSBuildToolsURL     "{{ vs_buildtools }}"
        -VSBuildToolsHash    "{{ vs_buildtools_hash }}"
        -PreviousClangURL    "{{ clang_10_url }}"
        -PreviousClangHash   "{{ clang_10_hash }}"
        -ClangURL            "{{ clang_11_url }}"
        -ClangHash           "{{ clang_11_hash }}"
        -ShellCheckURL       "{{ shellcheck_url }}"
        -ShellCheckHash      "{{ shellcheck_hash }}"
        -NugetURL            "{{ nuget_url }}"
        -NugetHash           "{{ nuget_hash }}"
        -DevconURL           "{{ devcon_package_url }}"
        -DevconHash          "{{ devcon_package_hash }}"
        -AzureDCAPNupkgURL   "{{ az_dcap_client_url }}"
        -AzureDCAPNupkgHash  "{{ az_dcap_client_hash }}"
        -NSISURL             "{{ nsis_url }}"
        -NSISHash            "{{ nsis_hash }}"
        -InstallDocker

    - name: Check installed Intel PSW version
      ansible.windows.win_powershell:
        script: |
          (Get-WmiObject Win32_PnPSignedDriver | select DeviceName, DriverVersion, Manufacturer | where {$_.DeviceName -like "*Guard Extensions Platform*"}).DriverVersion
      register: intel_psw_version

    - name: Print Intel PSW version
      debug:
        var: intel_psw_version.output
    
    - name: Check installed Intel DCAP version
      ansible.windows.win_powershell:
        script: |
          (Get-Item C:\\Windows\\System32\\sgx_dcap_ql.dll).VersionInfo.ProductVersion
      register: intel_dcap_version

    - name: Print Intel DCAP version
      debug:
        var: intel_dcap_version.output

    # One way to ensure the system is reliable just after a reboot, is to set WinRM to a delayed startup
    - name: Ensure WinRM starts when the system has settled and is ready to work reliably
      win_service:
        name: WinRM
        start_mode: delayed

    - name: OE setup | Windows Updates
      block:
        - name: Install all security, critical, and rollup updates without a scheduled task
          win_updates:
            category_names:
              - SecurityUpdates
              - CriticalUpdates
              - UpdateRollups
            reboot: yes
            reboot_timeout: 3600
      always:
        - name: OE setup | Reboot the node
          win_reboot:

    - import_role:
        name: windows/openenclave
        tasks_from: validation.yml
